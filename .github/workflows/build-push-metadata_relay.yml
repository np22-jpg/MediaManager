name: Build and Push MetadataRelay Docker Image

on:
  push:
    branches:
      - master
    tags:
      - 'v*.*.*'
    paths:
      - 'metadata_relay/**'
      - '.github/workflows/build-push-metadata_relay.yml'
  pull_request:
    paths:
      - 'metadata_relay/**'
      - '.github/workflows/build-push-metadata_relay.yml'
  workflow_dispatch:

jobs:
  format-check:
    name: Check Go Formatting
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Check formatting
        run: |
          cd metadata_relay
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            echo "Please run 'gofmt -s -w .' to format your code."
            exit 1
          fi

  lint-code:
    name: Lint Go Code
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: golangci-lint
        uses: golangci/golangci-lint-action@v8
        with:
          version: v2.3
          working-directory: "metadata_relay"

  # Tests require the full musicbrainz db + a fully indexed typesense
  # This would take hours and likely max out the storage space
  # given on a GH hosted GHA runner.
  # For now, tests are configured to pass even if this software is unavailable.

  test:
    name: Run Go Tests
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-go@v5
        with:
          go-version: stable
      - name: Run tests
        run: |
          cd metadata_relay
          go test -v ./...
      - name: Run tests with race detection
        run: |
          cd metadata_relay
          go test -race -v ./...

  build-and-push:
    needs: [format-check, lint-code, test]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}/metadata_relay
          tags: |
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') && github.event_name != 'pull_request' }}
            type=ref,event=tag
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=sha

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: ./metadata_relay
          file: ./metadata_relay/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          build-args: |
            VERSION=${{ steps.meta.outputs.version }}
